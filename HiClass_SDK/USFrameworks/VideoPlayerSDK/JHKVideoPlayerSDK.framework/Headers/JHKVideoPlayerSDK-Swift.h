#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.1 effective-4.2 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef JHKVIDEOPLAYERSDK_SWIFT_H
#define JHKVIDEOPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JHKVideoPlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// 本地推送结果枚举
/// <ul>
///   <li>
///     success: 成功
///   </li>
///   <li>
///     success: 失败
///   </li>
///   <li>
///     noDevice: 当前无设备
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DLNAPushResult, closed) {
  DLNAPushResultSuccess = 0,
  DLNAPushResultFailure = 1,
  DLNAPushResultNoDevice = 2,
};

@class NSCoder;

SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKControlView")
@interface JHKControlView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@protocol JHKDLNAManagerDelegate;
@class NSString;

SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKDLNAManager")
@interface JHKDLNAManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) JHKDLNAManager * _Nonnull shared;)
+ (JHKDLNAManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <JHKDLNAManagerDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable isDLNAOnePlay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSNumber;

@interface JHKDLNAManager (SWIFT_EXTENSION(JHKVideoPlayerSDK))
/// tv端播放状态发生变化
/// \param state JHKDLNAPlayState
///
- (void)tvPlayStateChangedWithState:(NSInteger)state;
- (void)tvPlayedVideosWithIndex:(NSInteger)index;
@end



@class NSURL;
@class JHKDLNAVideoModel;

SWIFT_PROTOCOL("_TtP17JHKVideoPlayerSDK22JHKDLNAManagerDelegate_")
@protocol JHKDLNAManagerDelegate
/// 返回当前设备总数
///
/// returns:
/// Int
- (NSInteger)currentDevicesCount SWIFT_WARN_UNUSED_RESULT;
/// 投屏url
/// \param deviceId 设备Id
///
/// \param url 视频url
///
/// \param startTime 开始播放时间，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushVideoWithDeviceId:(NSString * _Nonnull)deviceId url:(NSURL * _Nonnull)url startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 播放
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)playWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 暂停
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pauseWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 快进、快退
/// \param deviceId 设备Id
///
/// \param startTime 指定播放时间位置，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)seekWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 获取当前播放时长
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)currentPlayedTimeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSTimeInterval, NSTimeInterval, BOOL))complete;
/// 获取视频总时长
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)totalTimeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSTimeInterval, BOOL))complete;
/// 设置静音、取消静音
/// \param deviceId 设备Id
///
/// \param mute true: 设置静音   false: 取消静音
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)setMuteWithDeviceId:(NSString * _Nonnull)deviceId mute:(BOOL)mute complete:(void (^ _Nonnull)(BOOL))complete;
/// 获取静音状态
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)isMuteWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL, BOOL))complete;
/// 获取当前音量
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)volumeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSInteger, BOOL))complete;
/// 设置音量
/// \param deviceId 设备Id
///
/// \param volume 音量
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)setVolumeWithDeviceId:(NSString * _Nonnull)deviceId volume:(NSInteger)volume complete:(void (^ _Nonnull)(NSInteger, BOOL))complete;
/// 停止当前视频播放
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)stopVideoWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 退出投屏
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)exitDLNAWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 投屏本地文件
/// \param path 本地媒资地址
///
/// \param fileName 文件名称
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushLocalMediaFileWithPath:(NSString * _Nonnull)path fileName:(NSString * _Nonnull)fileName complete:(void (^ _Nonnull)(enum DLNAPushResult))complete;
/// 获取当前连接设备的名称
///
/// returns:
/// 设备名称
- (NSString * _Nullable)connectedDeviceName SWIFT_WARN_UNUSED_RESULT;
/// 投屏url
/// \param deviceId 设备Id
///
/// \param videos 视频列表
///
/// \param index 开始播放的索引
///
/// \param startTime 开始播放时间，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushVideoWithDeviceId:(NSString * _Nonnull)deviceId videos:(NSArray<JHKDLNAVideoModel *> * _Nonnull)videos index:(NSInteger)index startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 是否支持多集推送
/// \param deviceId 设备Id
///
///
/// returns:
/// true支持  false不支持
- (BOOL)isSupportListPushWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
@end

/// DLNA电视端视频播放状态
/// <ul>
///   <li>
///     unKown: 未知
///   </li>
///   <li>
///     playing: 播放中
///   </li>
///   <li>
///     paused: 已暂停
///   </li>
///   <li>
///     stopped: 已停止
///   </li>
///   <li>
///     tvOFF: 当前投屏电视关机
///   </li>
///   <li>
///     tvExit: 电视退出当前投屏
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, JHKDLNAPlayState, closed) {
  JHKDLNAPlayStateUnKown = 0,
  JHKDLNAPlayStatePlaying = 1,
  JHKDLNAPlayStatePaused = 2,
  JHKDLNAPlayStateStopped = 3,
  JHKDLNAPlayStateTvOFF = 4,
  JHKDLNAPlayStateTvExit = 5,
};


SWIFT_CLASS("_TtC17JHKVideoPlayerSDK17JHKDLNAVideoModel")
@interface JHKDLNAVideoModel : NSObject
/// 视频url
@property (nonatomic, copy) NSURL * _Nonnull url;
/// 视频标题
@property (nonatomic, copy) NSString * _Nullable title;
/// 在连续剧中，是第几集
@property (nonatomic, copy) NSString * _Nullable seriesIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17JHKVideoPlayerSDK17JHKVideoListModel")
@interface JHKVideoListModel : NSObject <NSCopying>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// 单集视频资源model
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK13JHKVideoModel")
@interface JHKVideoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol JHKVideoPlayerOCDelegate;

/// 视频播放器控制类
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKVideoPlayer")
@interface JHKVideoPlayer : NSObject
/// 播放器OC代理对象
@property (nonatomic, weak) id <JHKVideoPlayerOCDelegate> _Nullable ocDelegate;
/// 控制面板
@property (nonatomic, weak) JHKControlView * _Nullable controlView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface JHKVideoPlayer (SWIFT_EXTENSION(JHKVideoPlayerSDK))
/// 结束播放,基本功能是暂停，为了统计日志,在视频结束或被返回时调用此方法
/// \param cleanURL true: 清空当前播放资源 false: 不清空当前资源
///
- (void)stopWithCleanURL:(BOOL)cleanURL;
/// 快进
/// \param to 快进至XX秒
///
/// \param complete 完成回调
///
- (void)seekWithTimeSeconds:(NSTimeInterval)to complete:(void (^ _Nullable)(BOOL))complete;
/// 全屏、竖屏切换
/// \param fullScreen 是否全屏展示
///
- (void)enterFullScreenWithFullScreen:(BOOL)fullScreen animate:(BOOL)animate;
@end




/// 播放器生产者
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK21JHKVideoPlayerFactory")
@interface JHKVideoPlayerFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17JHKVideoPlayerSDK24JHKVideoPlayerOCDelegate_")
@protocol JHKVideoPlayerOCDelegate
@optional
/// 切换播放视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didSelectVideoAt:(NSInteger)index;
/// 返回上个页面
/// \param videoPlayer JHKVideoPlayer
///
///
/// returns:
/// Void
- (void)goBackPageWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer;
/// 收藏OR取消收藏
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
/// \param shouldCollect 是否收藏
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer index:(NSInteger)index shouldCollect:(BOOL)shouldCollect;
/// 投屏
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer tvScreen:(NSInteger)index;
/// 分享视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer shouldShareVideo:(NSInteger)index;
/// 横竖屏切换
/// \param videoPlayer JHKVideoPlayer
///
/// \param isFull 是否横屏
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didEnterFullScreen:(BOOL)isFull;
/// 广告点击
/// \param videoPlayer JHKVideoPlayer
///
/// \param didTappedAdvertisement 0:前贴广告 1:暂停广告
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didTappedAdvertisement:(NSInteger)didTappedAdvertisement;
/// 视频启播
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didPrepareToPlay:(NSTimeInterval)totalTime index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 视频播放通知(重播)
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didAgainPlay:(NSTimeInterval)totalTime currentTime:(NSTimeInterval)currentTime index:(NSInteger)index;
/// 视频播放时间改变
/// \param videoPlayer JHKVideoPlayer
///
/// \param changeTime 修改的时长
///
/// \param totalTime 总时长
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer changePlay:(NSTimeInterval)changeTime totalTime:(NSTimeInterval)totalTime index:(NSInteger)index;
/// 视频暂停
/// \param videoPlayer JHKVideoPlayer
///
/// \param currentTime 当前播放时长
///
/// \param totalTime 总时长
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didPauseToPlay:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime index:(NSInteger)index;
/// 视频结束
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didStoppedPlay:(NSTimeInterval)totalTime playedTime:(NSTimeInterval)playedTime index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 视频结束播放，记录页面启播开始到结束打点时长
/// \param videoPlayer JHKVideoPlayer
///
/// \param startTimeStamp 开始播放时间戳
///
/// \param endTimeStamp 结束播放时间戳
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didStoppedPlay:(NSTimeInterval)startTimeStamp endTimeStamp:(NSTimeInterval)endTimeStamp index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 切换倍速
/// \param videoPlayer JHKVideoPlayer
///
/// \param Index 倍速index
///
/// \param rate 倍速
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer changeRate:(NSInteger)Index rate:(float)rate;
/// 下载视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer download:(NSInteger)index;
/// 页面跳转
/// \param videoPlayer JHKVideoPlayer
///
/// \param jumpToOtherPage 0:登陆 1:购买VIP 2:startMain
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer jumpToOtherPage:(NSInteger)jumpToOtherPage;
/// 拖拽Slider
/// \param videoPlayer JHKVideoPlayer
///
/// \param toTime 拖播放时长
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didDraggedSlider:(NSTimeInterval)fromTime toTime:(NSTimeInterval)toTime;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.1 effective-4.2 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
#ifndef JHKVIDEOPLAYERSDK_SWIFT_H
#define JHKVIDEOPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JHKVideoPlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// 本地推送结果枚举
/// <ul>
///   <li>
///     success: 成功
///   </li>
///   <li>
///     success: 失败
///   </li>
///   <li>
///     noDevice: 当前无设备
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DLNAPushResult, closed) {
  DLNAPushResultSuccess = 0,
  DLNAPushResultFailure = 1,
  DLNAPushResultNoDevice = 2,
};

@class NSCoder;

SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKControlView")
@interface JHKControlView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@protocol JHKDLNAManagerDelegate;
@class NSString;

SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKDLNAManager")
@interface JHKDLNAManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) JHKDLNAManager * _Nonnull shared;)
+ (JHKDLNAManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <JHKDLNAManagerDelegate> _Nullable delegate;
@property (nonatomic, copy) NSString * _Nullable isDLNAOnePlay;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class NSNumber;

@interface JHKDLNAManager (SWIFT_EXTENSION(JHKVideoPlayerSDK))
/// tv端播放状态发生变化
/// \param state JHKDLNAPlayState
///
- (void)tvPlayStateChangedWithState:(NSInteger)state;
- (void)tvPlayedVideosWithIndex:(NSInteger)index;
@end



@class NSURL;
@class JHKDLNAVideoModel;

SWIFT_PROTOCOL("_TtP17JHKVideoPlayerSDK22JHKDLNAManagerDelegate_")
@protocol JHKDLNAManagerDelegate
/// 返回当前设备总数
///
/// returns:
/// Int
- (NSInteger)currentDevicesCount SWIFT_WARN_UNUSED_RESULT;
/// 投屏url
/// \param deviceId 设备Id
///
/// \param url 视频url
///
/// \param startTime 开始播放时间，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushVideoWithDeviceId:(NSString * _Nonnull)deviceId url:(NSURL * _Nonnull)url startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 播放
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)playWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 暂停
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pauseWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 快进、快退
/// \param deviceId 设备Id
///
/// \param startTime 指定播放时间位置，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)seekWithDeviceId:(NSString * _Nonnull)deviceId startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 获取当前播放时长
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)currentPlayedTimeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSTimeInterval, NSTimeInterval, BOOL))complete;
/// 获取视频总时长
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)totalTimeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSTimeInterval, BOOL))complete;
/// 设置静音、取消静音
/// \param deviceId 设备Id
///
/// \param mute true: 设置静音   false: 取消静音
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)setMuteWithDeviceId:(NSString * _Nonnull)deviceId mute:(BOOL)mute complete:(void (^ _Nonnull)(BOOL))complete;
/// 获取静音状态
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)isMuteWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL, BOOL))complete;
/// 获取当前音量
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)volumeWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(NSInteger, BOOL))complete;
/// 设置音量
/// \param deviceId 设备Id
///
/// \param volume 音量
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)setVolumeWithDeviceId:(NSString * _Nonnull)deviceId volume:(NSInteger)volume complete:(void (^ _Nonnull)(NSInteger, BOOL))complete;
/// 停止当前视频播放
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)stopVideoWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 退出投屏
/// \param deviceId 设备Id
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)exitDLNAWithDeviceId:(NSString * _Nonnull)deviceId complete:(void (^ _Nonnull)(BOOL))complete;
/// 投屏本地文件
/// \param path 本地媒资地址
///
/// \param fileName 文件名称
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushLocalMediaFileWithPath:(NSString * _Nonnull)path fileName:(NSString * _Nonnull)fileName complete:(void (^ _Nonnull)(enum DLNAPushResult))complete;
/// 获取当前连接设备的名称
///
/// returns:
/// 设备名称
- (NSString * _Nullable)connectedDeviceName SWIFT_WARN_UNUSED_RESULT;
/// 投屏url
/// \param deviceId 设备Id
///
/// \param videos 视频列表
///
/// \param index 开始播放的索引
///
/// \param startTime 开始播放时间，秒
///
/// \param complete 完成回调
///
///
/// returns:
/// Void
- (void)pushVideoWithDeviceId:(NSString * _Nonnull)deviceId videos:(NSArray<JHKDLNAVideoModel *> * _Nonnull)videos index:(NSInteger)index startTime:(NSTimeInterval)startTime complete:(void (^ _Nonnull)(BOOL))complete;
/// 是否支持多集推送
/// \param deviceId 设备Id
///
///
/// returns:
/// true支持  false不支持
- (BOOL)isSupportListPushWithDeviceId:(NSString * _Nonnull)deviceId SWIFT_WARN_UNUSED_RESULT;
@end

/// DLNA电视端视频播放状态
/// <ul>
///   <li>
///     unKown: 未知
///   </li>
///   <li>
///     playing: 播放中
///   </li>
///   <li>
///     paused: 已暂停
///   </li>
///   <li>
///     stopped: 已停止
///   </li>
///   <li>
///     tvOFF: 当前投屏电视关机
///   </li>
///   <li>
///     tvExit: 电视退出当前投屏
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, JHKDLNAPlayState, closed) {
  JHKDLNAPlayStateUnKown = 0,
  JHKDLNAPlayStatePlaying = 1,
  JHKDLNAPlayStatePaused = 2,
  JHKDLNAPlayStateStopped = 3,
  JHKDLNAPlayStateTvOFF = 4,
  JHKDLNAPlayStateTvExit = 5,
};


SWIFT_CLASS("_TtC17JHKVideoPlayerSDK17JHKDLNAVideoModel")
@interface JHKDLNAVideoModel : NSObject
/// 视频url
@property (nonatomic, copy) NSURL * _Nonnull url;
/// 视频标题
@property (nonatomic, copy) NSString * _Nullable title;
/// 在连续剧中，是第几集
@property (nonatomic, copy) NSString * _Nullable seriesIndex;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17JHKVideoPlayerSDK17JHKVideoListModel")
@interface JHKVideoListModel : NSObject <NSCopying>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// 单集视频资源model
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK13JHKVideoModel")
@interface JHKVideoModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol JHKVideoPlayerOCDelegate;

/// 视频播放器控制类
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK14JHKVideoPlayer")
@interface JHKVideoPlayer : NSObject
/// 播放器OC代理对象
@property (nonatomic, weak) id <JHKVideoPlayerOCDelegate> _Nullable ocDelegate;
/// 控制面板
@property (nonatomic, weak) JHKControlView * _Nullable controlView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface JHKVideoPlayer (SWIFT_EXTENSION(JHKVideoPlayerSDK))
/// 结束播放,基本功能是暂停，为了统计日志,在视频结束或被返回时调用此方法
/// \param cleanURL true: 清空当前播放资源 false: 不清空当前资源
///
- (void)stopWithCleanURL:(BOOL)cleanURL;
/// 快进
/// \param to 快进至XX秒
///
/// \param complete 完成回调
///
- (void)seekWithTimeSeconds:(NSTimeInterval)to complete:(void (^ _Nullable)(BOOL))complete;
/// 全屏、竖屏切换
/// \param fullScreen 是否全屏展示
///
- (void)enterFullScreenWithFullScreen:(BOOL)fullScreen animate:(BOOL)animate;
@end




/// 播放器生产者
SWIFT_CLASS("_TtC17JHKVideoPlayerSDK21JHKVideoPlayerFactory")
@interface JHKVideoPlayerFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP17JHKVideoPlayerSDK24JHKVideoPlayerOCDelegate_")
@protocol JHKVideoPlayerOCDelegate
@optional
/// 切换播放视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didSelectVideoAt:(NSInteger)index;
/// 返回上个页面
/// \param videoPlayer JHKVideoPlayer
///
///
/// returns:
/// Void
- (void)goBackPageWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer;
/// 收藏OR取消收藏
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
/// \param shouldCollect 是否收藏
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer index:(NSInteger)index shouldCollect:(BOOL)shouldCollect;
/// 投屏
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer tvScreen:(NSInteger)index;
/// 分享视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer shouldShareVideo:(NSInteger)index;
/// 横竖屏切换
/// \param videoPlayer JHKVideoPlayer
///
/// \param isFull 是否横屏
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didEnterFullScreen:(BOOL)isFull;
/// 广告点击
/// \param videoPlayer JHKVideoPlayer
///
/// \param didTappedAdvertisement 0:前贴广告 1:暂停广告
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didTappedAdvertisement:(NSInteger)didTappedAdvertisement;
/// 视频启播
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didPrepareToPlay:(NSTimeInterval)totalTime index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 视频播放通知(重播)
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didAgainPlay:(NSTimeInterval)totalTime currentTime:(NSTimeInterval)currentTime index:(NSInteger)index;
/// 视频播放时间改变
/// \param videoPlayer JHKVideoPlayer
///
/// \param changeTime 修改的时长
///
/// \param totalTime 总时长
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer changePlay:(NSTimeInterval)changeTime totalTime:(NSTimeInterval)totalTime index:(NSInteger)index;
/// 视频暂停
/// \param videoPlayer JHKVideoPlayer
///
/// \param currentTime 当前播放时长
///
/// \param totalTime 总时长
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didPauseToPlay:(NSTimeInterval)currentTime totalTime:(NSTimeInterval)totalTime index:(NSInteger)index;
/// 视频结束
/// \param videoPlayer JHKVideoPlayer
///
/// \param totalTime 视频总时长
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didStoppedPlay:(NSTimeInterval)totalTime playedTime:(NSTimeInterval)playedTime index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 视频结束播放，记录页面启播开始到结束打点时长
/// \param videoPlayer JHKVideoPlayer
///
/// \param startTimeStamp 开始播放时间戳
///
/// \param endTimeStamp 结束播放时间戳
///
/// \param index 视频index
///
/// \param isAutoPlayed true: 自动播放 false: 手动播放
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didStoppedPlay:(NSTimeInterval)startTimeStamp endTimeStamp:(NSTimeInterval)endTimeStamp index:(NSInteger)index isAutoPlayed:(BOOL)isAutoPlayed;
/// 切换倍速
/// \param videoPlayer JHKVideoPlayer
///
/// \param Index 倍速index
///
/// \param rate 倍速
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer changeRate:(NSInteger)Index rate:(float)rate;
/// 下载视频
/// \param videoPlayer JHKVideoPlayer
///
/// \param index 视频index
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer download:(NSInteger)index;
/// 页面跳转
/// \param videoPlayer JHKVideoPlayer
///
/// \param jumpToOtherPage 0:登陆 1:购买VIP 2:startMain
///
///
/// returns:
/// Void
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer jumpToOtherPage:(NSInteger)jumpToOtherPage;
/// 拖拽Slider
/// \param videoPlayer JHKVideoPlayer
///
/// \param toTime 拖播放时长
///
- (void)videoPlayerWithVideoPlayer:(JHKVideoPlayer * _Nonnull)videoPlayer didDraggedSlider:(NSTimeInterval)fromTime toTime:(NSTimeInterval)toTime;
@end






#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
